class Solution {
    public List<Integer> getRow(int rowIndex) {
        // O(n^2)
        List<List<Integer>> triangle = new ArrayList<>();
        List<Integer> firstRow = new ArrayList<>();
        firstRow.add(1);
        triangle.add(firstRow);
        if(rowIndex == 0){
            return triangle.get(0);
        }
        for(int i = 1 ; i <= rowIndex+1 ; i++){
            List<Integer> currRow = new ArrayList<>();
            List<Integer> prevRow = triangle.get(i-1);
            currRow.add(1);
            for(int j = 1 ; j < i ; j++){
                currRow.add(prevRow.get(j-1)+prevRow.get(j));
            }
            currRow.add(1);
            triangle.add(currRow);
        }
        return triangle.get(rowIndex);
        
        // In O(n): for a particular line
        List<Integer> r = new ArrayList<>();
        int line = rowIndex+1;
        long number= 1;
        for(int i = 1; i<=line; i++){
            r.add((int)number);
            number = number * (line - i) / i;  
        }
        return r;
    }
}
